<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: snippet | Chris Greenwood]]></title>
  <link href="http://cmgreenwood.com/blog/categories/snippet/atom.xml" rel="self"/>
  <link href="http://cmgreenwood.com/"/>
  <updated>2013-05-24T23:02:45-04:00</updated>
  <id>http://cmgreenwood.com/</id>
  <author>
    <name><![CDATA[Chris Greenwood]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableViewCell from Nib]]></title>
    <link href="http://cmgreenwood.com/blog/2013/05/23/test-post/"/>
    <updated>2013-05-23T14:38:00-04:00</updated>
    <id>http://cmgreenwood.com/blog/2013/05/23/test-post</id>
    <content type="html"><![CDATA[<p>As far as I can tell, this is the best and most correct way to create a custom UITableViewCell that has a backing Objective-C class (so custom subviews) and is layed out using a Nib.  If anyone knows of a better way to do it, let me know.  There&rsquo;s a bunch of conflicting information on the web.</p>

<!-- more -->


<ol>
<li>Create your Nib</li>
<li>Remove the default UIView from XIB, replace it with a UITableViewCell</li>
<li>Create your UITableViewCell subclass in Objective-C</li>
<li>Set the class of the cell in IB to be your custom class</li>
<li>Manually write your UIOutlet properties for the custom view properties you want to access from the cell.</li>
<li>Add sub-views in IB that correspond to those outlets</li>
<li>Select the cell and open the right menu, right tab (Connections inspector).  There you should see the custom outlets you just coded up in the Outlets list</li>
<li>Select the handle to the right of each outlet and drag it over to the subview in IB that corresponds to that outlet</li>
<li>Finally, in your <code>tableView:cellForRowAtIndexPath:</code> method, instantiate the cell</li>
</ol>


<p>The cell needs to be instantiated using the Nib to display your custom layout:</p>

<p><div>
  <pre><code class='c'>&amp;hellip;
NSString &lt;em&gt;ident = @&amp;ldquo;customCell&amp;rdquo;;
CustomTableViewCell &lt;/em&gt;cell = [tableView dequeueReusableCellWithIdentifier:ident];&lt;/p&gt;

&lt;p&gt;if(!cell)
{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSArray *tlobjs = [[NSBundle mainBundle] loadNibNamed:@&quot;CustomTableViewCell&quot; owner:nil options:nil];
cell = (CustomTableViewCell*)[tlobjs objectAtIndex:0];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&amp;hellip;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RestKit POST with nested data]]></title>
    <link href="http://cmgreenwood.com/blog/2013/05/23/restkit-post/"/>
    <updated>2013-05-23T00:00:00-04:00</updated>
    <id>http://cmgreenwood.com/blog/2013/05/23/restkit-post</id>
    <content type="html"><![CDATA[<p>I am using <a href="http://www.restkit.org">RestKit</a> to map objects in my iPhone application to RESTful requests to my <a href="http://flask.pocoo.org/">Flask</a> server.  I have to use RKRequestMapping to specify the format of the data a POST request expects.  This works fine when the data is flat, but I had trouble when there was an array of nested mappings that needed to be accounted for.  For example, here is the object that will be passed as data to the POST request:</p>

<!-- more -->


<p><div>
  <pre><code class='objective-c'>interface TestArgs : NSObject&lt;/p&gt;

&lt;p&gt;property (copy, nonatomic) NSString &lt;em&gt;name;
property (strong, nonatomic) NSArray &lt;/em&gt;users;&lt;/p&gt;

&lt;p&gt;end</code></pre>
</div>
</p>

<p>The users array is an array of dictionaries, each containing the keys {&lsquo;id&rsquo;, &lsquo;type&rsquo;}.  What I expected to see on the Flask end in the <code>request.form</code> variable was:</p>

<p><div>
  <pre><code class='python'>{&amp;lsquo;name&amp;rsquo;: &amp;lsquo;theName&amp;rsquo;, &amp;lsquo;users&amp;rsquo;: [{&amp;lsquo;id&amp;rsquo;:1, &amp;lsquo;type&amp;rsquo;:&amp;lsquo;user&amp;rsquo;},{&amp;lsquo;id&amp;rsquo;:2,&amp;lsquo;type&amp;rsquo;:&amp;lsquo;admin&amp;rsquo;}]}</code></pre>
</div>
</p>

<p>What I actually got was:</p>

<p><div>
  <pre><code class='python'>{&amp;lsquo;name&amp;rsquo;: &amp;lsquo;theName&amp;rsquo;, &amp;lsquo;users[][&amp;ldquo;id&amp;rdquo;]&amp;rsquo;: 1, &amp;lsquo;users[][&amp;ldquo;id&amp;rdquo;]&amp;rsquo;: 2, &amp;lsquo;users[][&amp;ldquo;type&amp;rdquo;]&amp;rsquo;: &amp;lsquo;user&amp;rsquo;, &amp;lsquo;users[][&amp;ldquo;type&amp;rdquo;]&amp;rsquo;: &amp;lsquo;admin&amp;rsquo;}</code></pre>
</div>
</p>

<p>Not very helpful.  The reason this happens is that form data is generally encoded in URL encoding, not JSON encoding.  URL encoding doesn&rsquo;t handle array values very well, so I needed to use JSON encoding to capture the nested information I wanted to send.  Took me a while, but as it turns out I had to change two things in my code to make this work.  First, on the client side, I had to change the serialization type that RestKit uses to serialize POST data:</p>

<p><div>
  <pre><code class='objective-c'>RKObjectManager *objectManager = &amp;hellip;
[objectManager setRequestSerializationMIMEType:RKMIMETypeJSON];</code></pre>
</div>
</p>

<p>Second, on the server side, I had to access the JSON data that was submitted with the POST differently:</p>

<p><div>
  <pre><code class='python'>post_data = request.json
user_array = post_data[&amp;lsquo;users&amp;rsquo;]</code></pre>
</div>
</p>
]]></content>
  </entry>
  
</feed>
